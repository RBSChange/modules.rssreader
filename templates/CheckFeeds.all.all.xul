<?xml version="1.0"?>
<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<window title="Vérification des flux" orient="vertical" xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
	style="background: #F8F8F7;" onload="checkInit();">
	${scripts}
	<script type="text/javascript"><![CDATA[
		var ids = [${ids}];
	    var index = 0;
	    var count = ${nbFeeds};
	    var doItAgain = false;
	    var logs = [];

	    function checkInit()
		{
			if (count == 0)
			{
				window.alert("Il n'existe aucun flux à vérifier.");
				self.close();
			}
			document.getElementById("counter").setAttribute("value", "0/" + count);
			document.getElementById("count").setAttribute("value", count);
		}

		function start()
		{
			index = 0;
			logs = [];

			document.getElementById("progress").setAttribute("value", "0%");
			document.getElementById("counter").setAttribute("value", "0/" + count);
			document.getElementById("start").setAttribute("disabled", "true");
			document.getElementById("view").setAttribute("disabled", "true");
			document.getElementById("stop").removeAttribute("disabled");
			document.getElementById("close").setAttribute("disabled", "true");

			var logList = document.getElementById("log");
			for (var i = logList.childNodes.length; i > 2; i--)
			{
				logList.removeChild(logList.childNodes[i - 1]);
			}

			doItAgain = true;

			doCheck();
		}

		function doEnd()
		{
			doItAgain = false;

			sendReport();

			document.getElementById("start").removeAttribute("disabled");
			document.getElementById("view").removeAttribute("disabled");
			document.getElementById("stop").setAttribute("disabled", "true");
			document.getElementById("close").removeAttribute("disabled");
		}

		function stop()
		{
			document.getElementById("progress").setAttribute("value", "0%");
			document.getElementById("counter").setAttribute("value", "0/" + count);

			doEnd();
		}

		function updateProgress()
		{
			var percent = Math.floor(((index + 1)  / count) * 100);
			document.getElementById("progress").setAttribute("value", percent + "%");
			document.getElementById("counter").setAttribute("value", (index + 1) + "/" + count);
		}

		function finish()
		{
			doEnd();
		}

		function doCheck()
		{
			if ((index >= count) || !doItAgain)
			{
				finish();
			}
			else if (ids[index])
			{
				var req = new XMLHttpRequest();
				req.open('GET', '${UIHOST}/xul_controller.php?module=rssreader&action=CheckFeeds&cmpref=' + ids[index] + '&doCheck=1', true);

				var context = this;
				req.onreadystatechange = function (aEvt)
				{
					if (req.readyState == 4)
					{
						if (req.status == 200)
						{
							if (context.doItAgain)
							{
								var xmlText = req.responseText;

								if (xmlText.indexOf('<'+'?xml') == 0)
								{
									xmlText = xmlText.substring(xmlText.indexOf('>')+1, xmlText.length);
								}
								xmlText = trim(xmlText);

								try
								{
									var e4x = new XML(xmlText);
									status  = e4x.status.toString().toUpperCase();

									var listItem = document.createElement("listitem");
									var listCellLabel = document.createElement("listcell");
									listCellLabel.setAttribute("label", e4x.message.toString());

									var listCellType = document.createElement("listcell");
									listCellType.setAttribute("label", e4x.contents.feedtype.toString());

									var listCellStatus = document.createElement("listcell");
									if (status == "OK")
									{
										listCellStatus.setAttribute("label", "OK");
										listCellStatus.setAttribute("style", "color: green;");
									}
									else
									{
										listCellStatus.setAttribute("label", e4x.contents.message.toString());
										listCellStatus.setAttribute("style", "color: " + e4x.contents.color.toString() + ";");
										context.logs.push({message: e4x.contents.detail.toString()});
									}

									listItem.appendChild(listCellLabel);
									listItem.appendChild(listCellType);
									listItem.appendChild(listCellStatus);
									document.getElementById("log").appendChild(listItem);
								}
								catch (e)
								{
									if (context.ids[context.index])
									{
										var listItem = document.createElement("listitem");
										var listCellLabel = document.createElement("listcell");
										listCellLabel.setAttribute("label", "Document " + context.ids[context.index]);
										listCellLabel.setAttribute("style", "color: red;");

										var listCellType = document.createElement("listcell");

										var listCellStatus = document.createElement("listcell");
										listCellStatus.setAttribute("label", "Erreur inconnue");
										listCellStatus.setAttribute("style", "color: red;");

										listItem.appendChild(listCellLabel);
										listItem.appendChild(listCellType);
										listItem.appendChild(listCellStatus);

										document.getElementById("log").appendChild(listItem);
										context.logs.push({message: context.ids[context.index] + ':' + req.responseText});
									}
								}

								context.updateProgress();
								context.index++;
								context.doCheck();
							}
						}
						else
						{
							context.stop();
						}
					}
				};
				req.send(null);
			}
		}

		function noerror()
		{
			alert("Aucune erreur n'a été notifiée.");
		}

		function view()
		{
			if (logs.length > 0)
			{
				var log = window.open("about:blank", "log");
				log.document.open();
				log.document.write('<h1 style="font-family: Trebuchet, Arial, sans-serif; font-size: 90%;">Erreurs détectées :</h1>');
				log.document.write('<dl style="font-family: Trebuchet, Arial, sans-serif; font-size: 80%;">');
				for (var i = 0; i < logs.length; i++)
				{
					log.document.write(logs[i].message);
				}
				log.document.write('</dl>');
				log.document.close();
			}
			else
			{
				noerror();
			}
		}

		function sendReport()
		{
			if (logs.length > 0)
			{
				var data = [];
				var message = "";

				for (var i = 0; i < logs.length; i++)
				{
					message += logs[i].message;
				}

				var req = new XMLHttpRequest();
				req.open('post', '${UIHOST}/xul_controller.php?module=rssreader&action=CheckFeeds&doSend=1', false);
				data.push("message=" + encodeURIComponent(message));
				req.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
				req.send(data.join("&"));

				alert('Des erreurs ont été notifiées par mail.');
			}
			else
			{
				noerror();
			}
		}
	]]></script>

	<vbox flex="1">
       <label value="Vérification des flux" style="font-size: 14pt; font-weight: bold;" />

       <hbox>
           <label value="Nombre de flux à vérifier" style="text-decoration: underline;" />
           <label value=":" />
           <label id="count" value="0"/>
       </hbox>

       <hbox pack="center" style="font-weight: bold;">
           <label id="message" value="Démarrer la vérification à l'aide du bouton ci-dessous."/>
       </hbox>

       <listbox id="log" style="height: 100px;">
          <listhead>
            <listheader label="Flux"/>
            <listheader label="Type"/>
            <listheader label="Résultat"/>
          </listhead>
          <listcols>
            <listcol flex="4"/>
            <listcol flex="1"/>
            <listcol flex="1"/>
          </listcols>
       </listbox>

       <hbox pack="center" style="font-weight: bold;">
           <progressmeter id="progress" mode="determined" value="0%" flex="1"/>
           <label id="counter" value="0/0"/>
       </hbox>

       <hbox pack="end">
           <button id="start" image="${IconsBase}/small/control-start.png" label=" Démarrer" oncommand="start()" />
           <button id="stop" image="${IconsBase}/small/control-stop.png" label=" Arrêter" oncommand="stop()" disabled="true" />
           <button id="view" image="${IconsBase}/small/message.png" label=" Voir le rapport" oncommand="view()" disabled="true" />
           <spacer flex="1"/>
           <button id="close" image="${IconsBase}/small/delete.png" label=" Quitter" oncommand="self.close()" />
       </hbox>
	</vbox>
</window>